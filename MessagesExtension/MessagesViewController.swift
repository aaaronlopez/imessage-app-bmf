//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Aaron Lopez on 11/9/17.
//  Copyright Â© 2017 Aaron Lopez. All rights reserved.
//

import UIKit
import Messages
import Branch

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var deepLink: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    override func didBecomeActive(with conversation: MSConversation) {
        Branch.getInstance().initSession(launchOptions: [:]) { (params, error) in
            // do stuff with deep link data (nav to page, display content, etc)
            print(params as! [String: AnyObject] )
        }
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    @IBAction func cmdShareButton(_ sender: Any) {
        let buo = BranchUniversalObject(canonicalIdentifier: "content/123")
        buo.canonicalUrl = "https://example.com/content/123"
        buo.title = "Content 123 Title"
        buo.contentDescription = "Content 123 Description \(Date())"
        buo.imageUrl = "http://lorempixel.com/400/400/"
        buo.price = 12.12
        buo.currency = "USD"
        buo.contentIndexMode = .public
        buo.automaticallyListOnSpotlight = true
        buo.addMetadataKey("custom", value: "123")
        buo.addMetadataKey("anything", value: "everything")
        
        let lp: BranchLinkProperties = BranchLinkProperties()
        lp.channel = "facebook"
        lp.feature = "sharing"
        lp.campaign = "content 123 launch"
        lp.stage = "new user"
        lp.tags = ["one", "two", "three"]
        
        lp.addControlParam("custom_data", withValue: "yes")
        lp.addControlParam("look_at", withValue: "this")
        lp.addControlParam("nav_to", withValue: "over here")
        lp.addControlParam("random", withValue: UUID.init().uuidString)
        
        let message = "Check out this link"
        buo.showShareSheet(with: lp, andShareText: message, from: self) { (activityType, completed) in
            print(activityType ?? "")
        }
    }
    
    @IBAction func cmdCreateDeepLink(_ sender: Any) {
        let buo = BranchUniversalObject(canonicalIdentifier: "content/123")
        buo.canonicalUrl = "https://example.com/content/123"
        buo.title = "Content 123 Title"
        buo.contentDescription = "Content 123 Description \(Date())"
        buo.imageUrl = "http://lorempixel.com/400/400/"
        buo.price = 12.12
        buo.currency = "USD"
        buo.contentIndexMode = .public
        buo.automaticallyListOnSpotlight = true
        buo.addMetadataKey("custom", value: "123")
        buo.addMetadataKey("anything", value: "everything")
        
        let lp: BranchLinkProperties = BranchLinkProperties()
        lp.channel = "facebook"
        lp.feature = "sharing"
        lp.campaign = "content 123 launch"
        lp.stage = "new user"
        lp.tags = ["one", "two", "three"]
        
        lp.addControlParam("custom_data", withValue: "yes")
        lp.addControlParam("look_at", withValue: "this")
        lp.addControlParam("nav_to", withValue: "over here")
        lp.addControlParam("random", withValue: UUID.init().uuidString)
        
        let link = buo.getShortUrl(with: lp)
        
        deepLink.text = link
    }
}
